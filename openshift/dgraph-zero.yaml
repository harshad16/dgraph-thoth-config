apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: dgraph-zero-deployment
  annotations:
    description: "Dgraph Zero"
    openshift.io/display-name: "Dgraph Zero"
    version: 0.2.0
    tags: dgraph,zero,thoth,ai-stacks
    template.openshift.io/documentation-url: https://github.com/Thoth-Station/
    template.openshift.io/long-description: "This is an OpenShift Template to deploy Dgraph Zeros"
    template.openshift.io/provider-display-name: "Red Hat, Inc."
  labels:
    template: dgraph-zero-deployment
    app: dgraph
    component: zero

parameters:
  - description: "Hostname to be used for exposing the REST API"
    displayName: "Hostname"
    required: true
    name: HOST_NAME
    value: "zero-rest-thoth-dgraph-stage.cloud.paas.psi.redhat.com"

  - description: "StorageClass to be used"
    displayName: "StorageClass"
    required: true
    name: STORAGE_CLASS_NAME
    value: "ceph-dyn-thoth-paas-prod-psi"

  - description: "Storage size to be used (dont forget the Gi)"
    displayName: "Storage size"
    required: true
    name: STORAGE_SIZE
    value: "5Gi"


objects:
  - apiVersion: v1
    kind: Service
    metadata:
      name: zero-public
      labels:
        app: dgraph
        component: zero
    spec:
      type: LoadBalancer
      ports:
        - port: 5080
          targetPort: 5080
          name: zero-grpc
        - port: 6080
          targetPort: 6080
          name: zero-rest
      selector:
        app: dgraph
        component: zero

  # This is a headless service which is necessary for discovery for a dgraph-zero StatefulSet.
  # https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#creating-a-statefulset
  - apiVersion: v1
    kind: Service
    metadata:
      name: zero
      labels:
        app: dgraph
        component: zero
    spec:
      ports:
      - port: 5080
        targetPort: 5080
        name: zero-grpc
      clusterIP: None
      selector:
        app: dgraph
        component: zero

  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: zero
      labels:
        app: dgraph
        component: zero
    spec:
      serviceName: "zero"
      replicas: 3
      selector:
        matchLabels:
          app: dgraph
          component: zero
      template:
        metadata:
          labels:
            app: dgraph
            component: zero
        spec:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - key: app
                      operator: In
                      values:
                      - zero
                  topologyKey: kubernetes.io/hostname
          containers:
          - name: zero
            image: dgraph:v1.0.15
            imagePullPolicy: IfNotPresent
            ports:
              - containerPort: 5080
                name: zero-grpc
              - containerPort: 6080
                name: zero-rest
            volumeMounts:
              - name: datadir
                mountPath: /dgraph
            env:
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
            command:
              - bash
              - "-c"
              - |
                set -ex
                [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
                ordinal=${BASH_REMATCH[1]}
                idx=$(($ordinal + 1))
                if [[ $ordinal -eq 0 ]]; then
                  dgraph zero --my=$(hostname -f):5080 --idx $idx --replicas 3
                else
                  dgraph zero --my=$(hostname -f):5080 --peer zero-0.zero.${POD_NAMESPACE}.svc.cluster.local:5080 --idx $idx --replicas 3
                fi
            resources:
              limits:
                cpu: 1
                memory: 5Gi
              requests:
                cpu: 1
                memory: 5Gi
          terminationGracePeriodSeconds: 60
          volumes:
          - name: datadir
            persistentVolumeClaim:
              claimName: datadir
      updateStrategy:
        type: RollingUpdate
      volumeClaimTemplates:
        - metadata:
            name: datadir
          spec:
            accessModes:
              - "ReadWriteOnce"
            resources:
              requests:
                storage: "${STORAGE_SIZE}"
            storageClassName: "${STORAGE_CLASS_NAME}"

  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: dgraph
        component: zero
      name: zero-rest
    spec:
      host: "${HOST_NAME}"
      port:
        targetPort: zero-rest
      to:
        kind: Service
        name: zero-public
        weight: 100
      wildcardPolicy: None
